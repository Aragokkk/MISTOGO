import React, { useEffect, useRef, useState } from "react";
import L from "leaflet";
import "leaflet/dist/leaflet.css";
import "./Zones.css";
import BackHomeButton from "../../components/BackHomeButton";
import BackButton from "../../components/BackButton";

// –¢–∏–ø–∏ –¥–ª—è TypeScript
interface ParkingZone {
  id: number;
  name: string;
  color: string;
  type: 'allowed' | 'restricted' | 'premium';
  description: string;
  coordinates: L.LatLngExpression[];
  center: L.LatLngExpression;
  priceModifier?: number; // –ú–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ü—ñ–Ω–∏ –¥–ª—è –ø—Ä–µ–º—ñ—É–º –∑–æ–Ω
}

interface VehicleMarker {
  id: number;
  type: 'car' | 'scooter' | 'moped' | 'bike';
  brand: string;
  model: string;
  lat: number;
  lng: number;
  battery?: number; // –î–ª—è –µ–ª–µ–∫—Ç—Ä–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
  fuel?: number; // –î–ª—è –∞–≤—Ç–æ/–º–æ–ø–µ–¥—ñ–≤
  price: number; // –¶—ñ–Ω–∞ –∑–∞ —Ö–≤–∏–ª–∏–Ω—É
  available: boolean;
}

// –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∏ –∑ —ñ–∫–æ–Ω–∫–∞–º–∏ Leaflet
const icon = L.Icon.Default.prototype as any;
delete icon._getIconUrl;

L.Icon.Default.mergeOptions({
  iconRetinaUrl: "https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon-2x.png",
  iconUrl: "https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-icon.png",
  shadowUrl: "https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/images/marker-shadow.png"
});

function Zones() {
  const mapContainer = useRef<HTMLDivElement>(null);
  const map = useRef<L.Map | null>(null);
  const [selectedZone, setSelectedZone] = useState<ParkingZone | null>(null);
  const [selectedVehicle, setSelectedVehicle] = useState<VehicleMarker | null>(null);

  // –ó–æ–Ω–∏ –ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è MISTOGO –≤ –ö–∏—î–≤—ñ
  const parkingZones: ParkingZone[] = [
    {
      id: 1,
      name: "–¶–µ–Ω—Ç—Ä –º—ñ—Å—Ç–∞",
      color: "#28a745", // –ó–µ–ª–µ–Ω–∏–π - –æ—Å–Ω–æ–≤–Ω–∞ –∑–æ–Ω–∞
      type: 'allowed',
      coordinates: [
        [50.4501, 30.5134],
        [50.4501, 30.5434],
        [50.4351, 30.5434],
        [50.4351, 30.5134]
      ],
      center: [50.4426, 30.5284],
      description: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –∑–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—ó–∑–¥–∫–∏"
    },
    {
      id: 2,
      name: "–ü—Ä–µ–º—ñ—É–º –∑–æ–Ω–∞ - –ü–µ—á–µ—Ä—Å—å–∫",
      color: "#007bff", // –°–∏–Ω—ñ–π - –ø—Ä–µ–º—ñ—É–º
      type: 'premium',
      coordinates: [
        [50.4301, 30.5434],
        [50.4301, 30.5634],
        [50.4151, 30.5634],
        [50.4151, 30.5434]
      ],
      center: [50.4226, 30.5534],
      description: "–ü—Ä–µ–º—ñ—É–º –∑–æ–Ω–∞ (+2‚Ç¥/—Ö–≤ –¥–æ —Ç–∞—Ä–∏—Ñ—É)",
      priceModifier: 2
    },
    {
      id: 3,
      name: "–û–±–º–µ–∂–µ–Ω–∞ –∑–æ–Ω–∞ - –£—Ä—è–¥–æ–≤–∏–π –∫–≤–∞—Ä—Ç–∞–ª",
      color: "#dc3545", // –ß–µ—Ä–≤–æ–Ω–∏–π - –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ
      type: 'restricted',
      coordinates: [
        [50.4470, 30.5370],
        [50.4470, 30.5420],
        [50.4420, 30.5420],
        [50.4420, 30.5370]
      ],
      center: [50.4445, 30.5395],
      description: "–ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –∑–∞–≤–µ—Ä—à—É–≤–∞—Ç–∏ –ø–æ—ó–∑–¥–∫—É"
    },
    {
      id: 4,
      name: "–ü–æ–¥—ñ–ª - –°—Ç–∞–Ω–¥–∞—Ä—Ç",
      color: "#28a745",
      type: 'allowed',
      coordinates: [
        [50.4601, 30.5134],
        [50.4601, 30.5334],
        [50.4501, 30.5334],
        [50.4501, 30.5134]
      ],
      center: [50.4551, 30.5234],
      description: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –∑–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—ó–∑–¥–∫–∏"
    },
    {
      id: 5,
      name: "–û–±–æ–ª–æ–Ω—å - –°—Ç–∞–Ω–¥–∞—Ä—Ç",
      color: "#28a745",
      type: 'allowed',
      coordinates: [
        [50.5001, 30.4934],
        [50.5001, 30.5134],
        [50.4901, 30.5134],
        [50.4901, 30.4934]
      ],
      center: [50.4951, 30.5034],
      description: "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –∑–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—ó–∑–¥–∫–∏"
    }
  ];

  // –î–æ—Å—Ç—É–ø–Ω—ñ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ñ –∑–∞—Å–æ–±–∏
  const vehicles: VehicleMarker[] = [
    // –ê–≤—Ç–æ–º–æ–±—ñ–ª—ñ
    { id: 1, type: 'car', brand: 'Renault', model: 'Megane', lat: 50.4450, lng: 30.5200, fuel: 75, price: 8, available: true },
    { id: 2, type: 'car', brand: 'Toyota', model: 'Corolla', lat: 50.4480, lng: 30.5250, fuel: 60, price: 9, available: true },
    { id: 3, type: 'car', brand: 'Nissan', model: 'Leaf', lat: 50.4400, lng: 30.5350, battery: 85, price: 7, available: false },
    
    // –ï–ª–µ–∫—Ç—Ä–æ—Å–∞–º–æ–∫–∞—Ç–∏
    { id: 4, type: 'scooter', brand: 'Bolt', model: '4', lat: 50.4420, lng: 30.5280, battery: 90, price: 4, available: true },
    { id: 5, type: 'scooter', brand: 'Xiaomi', model: 'Pro 2', lat: 50.4460, lng: 30.5320, battery: 70, price: 3.5, available: true },
    { id: 6, type: 'scooter', brand: 'Ninebot', model: 'Max', lat: 50.4380, lng: 30.5400, battery: 45, price: 4, available: true },
    
    // –ú–æ–ø–µ–¥–∏
    { id: 7, type: 'moped', brand: 'Honda', model: 'Dio', lat: 50.4550, lng: 30.5180, fuel: 80, price: 6, available: true },
    { id: 8, type: 'moped', brand: 'Yamaha', model: 'Jog', lat: 50.4350, lng: 30.5450, fuel: 65, price: 6.5, available: true },
    
    // –í–µ–ª–æ—Å–∏–ø–µ–¥–∏
    { id: 9, type: 'bike', brand: 'Next', model: 'City', lat: 50.4500, lng: 30.5150, price: 2, available: true },
    { id: 10, type: 'bike', brand: 'Trek', model: 'FX', lat: 50.4430, lng: 30.5380, price: 2.5, available: true },
  ];

  // –Ü–∫–æ–Ω–∫–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
  const getVehicleIcon = (vehicle: VehicleMarker) => {
    const icons = {
      car: 'üöó',
      scooter: 'üõ¥',
      moped: 'üõµ',
      bike: 'üö≤'
    };

    const colors = {
      car: '#007bff',
      scooter: '#28a745',
      moped: '#ffc107',
      bike: '#17a2b8'
    };

    return L.divIcon({
      className: 'vehicle-marker',
      html: `<div style="
        background: ${vehicle.available ? colors[vehicle.type] : '#6c757d'};
        color: white;
        width: 36px;
        height: 36px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 18px;
        border: 3px solid white;
        box-shadow: 0 2px 8px rgba(0,0,0,0.3);
        opacity: ${vehicle.available ? 1 : 0.6};
        cursor: pointer;
      ">${icons[vehicle.type]}</div>`,
      iconSize: [36, 36],
      iconAnchor: [18, 18]
    });
  };

  useEffect(() => {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–∞—Ä—Ç–∏
    if (!map.current && mapContainer.current) {
      map.current = L.map(mapContainer.current, {
        center: [50.4426, 30.5284], // –¶–µ–Ω—Ç—Ä –ö–∏—î–≤–∞
        zoom: 13,
        zoomControl: true,
        scrollWheelZoom: true
      });

      // –ë–∞–∑–æ–≤–∏–π —à–∞—Ä –∫–∞—Ä—Ç–∏
      L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>',
        maxZoom: 19
      }).addTo(map.current);

      // –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–æ–Ω –ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è –∑ Geofencing
      parkingZones.forEach(zone => {
        const polygon = L.polygon(zone.coordinates, {
          color: zone.color,
          fillColor: zone.color,
          fillOpacity: zone.type === 'restricted' ? 0.4 : 0.2,
          weight: 2,
          dashArray: zone.type === 'restricted' ? '10, 10' : undefined
        }).addTo(map.current!);

        // –ü–æ–ø–∞–ø –¥–ª—è –∑–æ–Ω–∏
        polygon.bindPopup(`
          <div style="min-width: 200px;">
            <h3 style="margin: 0 0 10px 0; color: ${zone.color};">
              ${zone.name}
            </h3>
            <p style="margin: 5px 0;">
              <strong>–¢–∏–ø:</strong> ${
                zone.type === 'allowed' ? '‚úÖ –î–æ–∑–≤–æ–ª–µ–Ω–æ –ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è' :
                zone.type === 'premium' ? '‚≠ê –ü—Ä–µ–º—ñ—É–º –∑–æ–Ω–∞' :
                '‚õî –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è'
              }
            </p>
            <p style="margin: 5px 0;">${zone.description}</p>
            ${zone.priceModifier ? `<p style="margin: 5px 0; font-weight: bold;">
              –î–æ–¥–∞—Ç–∫–æ–≤–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: +${zone.priceModifier}‚Ç¥/—Ö–≤
            </p>` : ''}
          </div>
        `);

        polygon.on('click', () => {
          setSelectedZone(zone);
        });
      });

      // –î–æ–¥–∞–≤–∞–Ω–Ω—è –º–∞—Ä–∫–µ—Ä—ñ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
      vehicles.forEach(vehicle => {
        const marker = L.marker([vehicle.lat, vehicle.lng], {
          icon: getVehicleIcon(vehicle)
        }).addTo(map.current!);

        marker.bindPopup(`
          <div style="min-width: 220px;">
            <h4 style="margin: 0 0 8px 0; color: #333;">
              ${vehicle.brand} ${vehicle.model}
            </h4>
            <div style="display: flex; justify-content: space-between; margin: 8px 0;">
              <span><strong>–¢–∞—Ä–∏—Ñ:</strong> ${vehicle.price}‚Ç¥/—Ö–≤</span>
              ${vehicle.battery !== undefined ? 
                `<span>üîã ${vehicle.battery}%</span>` : 
                vehicle.fuel !== undefined ? 
                `<span>‚õΩ ${vehicle.fuel}%</span>` : ''
              }
            </div>
            <div style="margin: 8px 0;">
              <strong>–°—Ç–∞—Ç—É—Å:</strong> 
              <span style="color: ${vehicle.available ? '#28a745' : '#dc3545'};">
                ${vehicle.available ? '–î–æ—Å—Ç—É–ø–Ω–∏–π' : '–ó–∞–π–Ω—è—Ç–∏–π'}
              </span>
            </div>
            ${vehicle.available ? `
              <button style="
                width: 100%;
                padding: 8px;
                background: #28a745;
                color: white;
                border: none;
                border-radius: 4px;
                cursor: pointer;
                font-weight: bold;
                margin-top: 8px;
              " onclick="alert('–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è...')">
                –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏
              </button>
            ` : ''}
          </div>
        `);

        marker.on('click', () => {
          if (vehicle.available) {
            setSelectedVehicle(vehicle);
          }
        });
      });

      // –õ–µ–≥–µ–Ω–¥–∞
      const Legend = L.Control.extend({
        options: {
          position: 'bottomright' as L.ControlPosition
        },
        onAdd: function() {
          const div = L.DomUtil.create('div', 'info legend');
          
          div.innerHTML = `
            <h4>–ó–æ–Ω–∏ MISTOGO</h4>
            <div style="margin: 5px 0;">
              <span style="display: inline-block; width: 20px; height: 10px; background: #28a745; margin-right: 5px;"></span>
              –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –∑–æ–Ω–∞
            </div>
            <div style="margin: 5px 0;">
              <span style="display: inline-block; width: 20px; height: 10px; background: #007bff; margin-right: 5px;"></span>
              –ü—Ä–µ–º—ñ—É–º –∑–æ–Ω–∞ (+‚Ç¥)
            </div>
            <div style="margin: 5px 0;">
              <span style="display: inline-block; width: 20px; height: 10px; background: #dc3545; margin-right: 5px; border: 1px dashed #fff;"></span>
              –ó–∞–±–æ—Ä–æ–Ω–µ–Ω–∞ –∑–æ–Ω–∞
            </div>
            <hr style="margin: 10px 0; border-color: #ddd;">
            <h4>–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç</h4>
            <div style="margin: 5px 0;">üöó –ê–≤—Ç–æ–º–æ–±—ñ–ª—å</div>
            <div style="margin: 5px 0;">üõ¥ –°–∞–º–æ–∫–∞—Ç</div>
            <div style="margin: 5px 0;">üõµ –ú–æ–ø–µ–¥</div>
            <div style="margin: 5px 0;">üö≤ –í–µ–ª–æ—Å–∏–ø–µ–¥</div>
          `;
          
          return div;
        }
      });
      const legend = new Legend();
      legend.addTo(map.current!);

      // –ö–æ–Ω—Ç—Ä–æ–ª –º–∞—Å—à—Ç–∞–±—É
      L.control.scale({
        position: 'bottomleft',
        metric: true,
        imperial: false
      }).addTo(map.current!);

      // –ö–Ω–æ–ø–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó
      const LocationControl = L.Control.extend({
        options: {
          position: 'topright' as L.ControlPosition
        },
        onAdd: function(map: L.Map) {
          const button = L.DomUtil.create('div', 'leaflet-bar leaflet-control');
          button.innerHTML = `
            <a href="#" style="
              width: 34px;
              height: 34px;
              display: flex;
              align-items: center;
              justify-content: center;
              background: white;
              font-size: 20px;
              text-decoration: none;
            " title="–ú–æ—î –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è">üìç</a>
          `;
          
          L.DomEvent.on(button, 'click', function(e) {
            L.DomEvent.preventDefault(e);
            if ('geolocation' in navigator) {
              navigator.geolocation.getCurrentPosition(
                (position) => {
                  const { latitude, longitude } = position.coords;
                  map.setView([latitude, longitude], 16);
                  L.marker([latitude, longitude], {
                    icon: L.divIcon({
                      className: 'user-location',
                      html: '<div style="width: 12px; height: 12px; background: #007bff; border: 3px solid white; border-radius: 50%; box-shadow: 0 2px 4px rgba(0,0,0,0.3);"></div>',
                      iconSize: [18, 18],
                      iconAnchor: [9, 9]
                    })
                  }).addTo(map).bindPopup('–í–∏ —Ç—É—Ç');
                },
                (error) => {
                  alert('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è');
                }
              );
            }
          });
          
          return button;
        }
      });
      const locationControl = new LocationControl();
      locationControl.addTo(map.current!);
    }

    return () => {
      if (map.current) {
        map.current.remove();
        map.current = null;
      }
    };
  }, []);

  return (
    <div className="zones-container">
      <div className="zones-header">
        <h1 className="zones-title">–ö–∞—Ä—Ç–∞ –∑–æ–Ω –ø–∞—Ä–∫—É–≤–∞–Ω–Ω—è MISTOGO</h1>
        <p className="zones-subtitle">
          Geofencing –∑–æ–Ω–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ—Ä–µ–Ω–¥–∏ ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –ø–æ–±–ª–∏–∑—É
        </p>
      </div>

      {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ –ø–∞–Ω–µ–ª—å –¥–ª—è –∑–æ–Ω–∏ */}
      {selectedZone && (
        <div 
          className="zones-info-panel"
          style={{ borderLeft: `4px solid ${selectedZone.color}` }}
        >
          <h3 
            className="zones-info-panel-title"
            style={{ color: selectedZone.color }}
          >
            {selectedZone.name}
          </h3>
          <p className="zones-info-panel-content">
            <strong>–°—Ç–∞—Ç—É—Å:</strong> {
              selectedZone.type === 'allowed' ? '‚úÖ –î–æ–∑–≤–æ–ª–µ–Ω–∞ –∑–æ–Ω–∞' :
              selectedZone.type === 'premium' ? '‚≠ê –ü—Ä–µ–º—ñ—É–º –∑–æ–Ω–∞' :
              '‚õî –û–±–º–µ–∂–µ–Ω–∞ –∑–æ–Ω–∞'
            }
            <br />
            {selectedZone.description}
            {selectedZone.priceModifier && (
              <>
                <br />
                <strong>–î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–ª–∞—Ç–∞:</strong> +{selectedZone.priceModifier}‚Ç¥/—Ö–≤
              </>
            )}
          </p>
          <button 
            onClick={() => setSelectedZone(null)}
            className="zones-close-button"
          >
            –ó–∞–∫—Ä–∏—Ç–∏
          </button>
        </div>
      )}

      {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ –ø–∞–Ω–µ–ª—å –¥–ª—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É */}
      {selectedVehicle && (
        <div 
          className="zones-info-panel vehicle-panel"
          style={{ borderLeft: '4px solid #28a745' }}
        >
          <h3 className="zones-info-panel-title" style={{ color: '#28a745' }}>
            {selectedVehicle.brand} {selectedVehicle.model}
          </h3>
          <p className="zones-info-panel-content">
            <strong>–¢–∞—Ä–∏—Ñ:</strong> {selectedVehicle.price}‚Ç¥/—Ö–≤ + 20‚Ç¥ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è
            <br />
            <strong>–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –ø–ª–∞—Ç—ñ–∂:</strong> 99‚Ç¥
            {selectedVehicle.battery !== undefined && (
              <>
                <br />
                <strong>–ó–∞—Ä—è–¥:</strong> {selectedVehicle.battery}%
              </>
            )}
            {selectedVehicle.fuel !== undefined && (
              <>
                <br />
                <strong>–ü–∞–ª–∏–≤–æ:</strong> {selectedVehicle.fuel}%
              </>
            )}
          </p>
          <div style={{ display: 'flex', gap: '10px' }}>
            <button 
              className="zones-action-button"
              style={{ background: '#28a745' }}
            >
              –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏
            </button>
            <button 
              onClick={() => setSelectedVehicle(null)}
              className="zones-close-button"
            >
              –ó–∞–∫—Ä–∏—Ç–∏
            </button>
          </div>
        </div>
      )}

      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç–∏ */}
      <div 
        ref={mapContainer} 
        className="zones-map-container"
      />

      {/* –ù–∞–≤—ñ–≥–∞—Ü—ñ—è */}
      <div className="zones-navigation-buttons">
        <BackHomeButton />
        <BackButton />
      </div>
    </div>
  );
}

export default Zones;